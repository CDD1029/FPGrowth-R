dir()
dir()
library("arules")
library("rCBA")
read.transactions("IrisData.txt")
trans = read.transactions("IrisData.txt")
build(trans, className = NA, pruning = TRUE, sa = list(),verbose = TRUE, parallel = TRUE)
output <- rCBA::build(iris,sa = list(alpha=0.5), parallel=FALSE)
model <- output$model
predictions <- rCBA::classification(iris, model)
table(predictions)
sum(as.character(iris$Species)==as.character(predictions), na.rm=TRUE) / length(predictions)
buildFPGrowth(trans, className = NULL, verbose = TRUE, parallel = TRUE)
data("iris")
sum(as.character(iris$Species)==as.character(predictions), na.rm=TRUE) / length(predictions)
data("iris")
output <- rCBA::build(iris,sa = list(alpha=0.5), parallel=FALSE) # speeding up the cooling
model <- output$model
predictions <- rCBA::classification(iris, model)
table(predictions)
sum(as.character(iris$Species)==as.character(predictions), na.rm=TRUE) / length(predictions)
buildFPGrowth(train, className = NULL, verbose = TRUE, parallel = TRUE)
output <- rCBA::buildFPGrowth(iris[sample(nrow(iris), 20),], "Species", parallel=FALSE)
model <- output$model
predictions <- rCBA::classification(iris, model)
table(predictions)
sum(as.character(iris$Species)==as.character(predictions), na.rm=TRUE) / length(predictions)
train <- sapply(iris, as.factor)
train <- data.frame(train, check.names=FALSE)
txns <- as(train,"transactions")
rules = apriori(txns, parameter=list(support=0.03, confidence=0.03, minlen=2),
appearance = list(rhs=c("Species=setosa", "Species=versicolor", "Species=virginica"),default="lhs"))
predictions <- rCBA::classification(train,rules)
table(predictions)
sum(as.character(train$Species)==as.character(predictions),na.rm=TRUE)/length(predictions)
train <- sapply(iris,as.factor)
train <- data.frame(train, check.names=FALSE)
txns <- as(train,"transactions")
rules = rCBA::fpgrowth(txns, support=0.03, confidence=0.03, maxLength=2, consequent="Species",
parallel=FALSE)
predictions <- rCBA::classification(train,rules)
table(predictions)
sum(as.character(train$Species)==as.character(predictions),na.rm=TRUE)/length(predictions)
prunedRules <- rCBA::pruning(train, rules, method="m2cba", parallel=FALSE)
predictions <- rCBA::classification(train, prunedRules)
table(predictions)
sum(as.character(train$Species)==as.character(predictions),na.rm=TRUE)/length(predictions)
rules
inspect(rules)
data("Titanic.txt")
dir()
data("Titanic")
data = read.table("Titanic.txt")
ls
dir()
Rcpp::sourceCpp('~/Sync/FPGrowth/FPGrowth.cpp')
Rcpp::sourceCpp('~/Sync/FPGrowth/FPGrowth.cpp')
Rcpp::sourceCpp('FPGrowth.cpp')
timesTwo(1)
timesawo(1)
load("~/Dropbox/Parallels/FPGrowth/aug18.RData")
nrow(data)
data@data[,1]
rFunction <- function(transactionData) {
freq = itemFrequency(transactionData,"absolute")
numItems = ncol(t(freq)) # not sure why ncol, but that's what worked
freqWithAlpaOrdering = cbind(freq,0:(numItems-1))
orderedfreqWithAlpaOrderingreq = freqWithAlpaOrdering[order(freqWithAlpaOrdering[,1],freqWithAlpaOrdering[,2],decreasing=TRUE),]
# -------------- return(orderedfreqWithAlpaOrderingreq)
boolVector = transactionData[,1]
for(i in 2:nrow(transactionData)) {
boolVector = cbind(boolVector,transactionData@data[,i])
}
return boolVector
}
rFunction <- function(transactionData) {
freq = itemFrequency(transactionData,"absolute")
numItems = ncol(t(freq)) # not sure why ncol, but that's what worked
freqWithAlpaOrdering = cbind(freq,0:(numItems-1))
orderedfreqWithAlpaOrderingreq = freqWithAlpaOrdering[order(freqWithAlpaOrdering[,1],freqWithAlpaOrdering[,2],decreasing=TRUE),]
# -------------- return(orderedfreqWithAlpaOrderingreq)
boolVector = transactionData[,1]
for(i in 2:nrow(transactionData)) {
boolVector = cbind(boolVector,transactionData@data[,i])
}
return (boolVector)
}
rFunction(boolVector)
rFunction(data)
a = rFunction(data)
Rcpp::sourceCpp('FPGrowth.cpp')
write.csv(data,"junk.csv")
data.frame(data)
c(data)
c(data@data)
c(data@data[19])
c(data@data[20])
c(data@data[38])
c(data@data[1:])
data@data[1]
data@data[2]
data@data[19]
data@data[57]
data@data[57+19]
data@data[57+38]
data@data[1:2]
data@data[1:100]
data@data[1:1000]
data@data[1:10000]
nrow(data@data)
ncol(data@data)
data@data[1:77317]
rFunction <- function(transactionData) {
freq = itemFrequency(transactionData,"absolute")
numItems = ncol(t(freq)) # not sure why ncol, but that's what worked
freqWithAlpaOrdering = cbind(freq,0:(numItems-1))
orderedfreqWithAlpaOrderingreq = freqWithAlpaOrdering[order(freqWithAlpaOrdering[,1],freqWithAlpaOrdering[,2],decreasing=TRUE),]
# -------------- return(orderedfreqWithAlpaOrderingreq)
boolVector = transactionData@data[1:ncol(transactionData)]
return (boolVector)
}
rFunction(data)
rFunction <- function(transactionData) {
freq = itemFrequency(transactionData,"absolute")
numItems = ncol(t(freq)) # not sure why ncol, but that's what worked
freqWithAlpaOrdering = cbind(freq,0:(numItems-1))
orderedfreqWithAlpaOrderingreq = freqWithAlpaOrdering[order(freqWithAlpaOrdering[,1],freqWithAlpaOrdering[,2],decreasing=TRUE),]
# -------------- return(orderedfreqWithAlpaOrderingreq)
boolVector = transactionData@data[1:nrow(transactionData)]
return (boolVector)
}
rFunction(data)
a = rFunction(data)
77317 / 19
?`ngCMatrix-class`
Dim(data)
?count
?n
?elements
ncol(datqa)
ncol(data)
nrow(data)
rFunction <- function(transactionData) {
freq = itemFrequency(transactionData,"absolute")
numItems = ncol(t(freq)) # not sure why ncol, but that's what worked
freqWithAlpaOrdering = cbind(freq,0:(numItems-1))
orderedfreqWithAlpaOrderingreq = freqWithAlpaOrdering[order(freqWithAlpaOrdering[,1],freqWithAlpaOrdering[,2],decreasing=TRUE),]
# -------------- return(orderedfreqWithAlpaOrderingreq)
boolVector = transactionData@data[1:(nrow(transactionData)*ncol(transactionData))]
return (boolVector)
}
a = rFunction(data)
boolVec <- function(transactionData) {
boolVector = transactionData@data[1:(nrow(transactionData)*ncol(transactionData))]
return (boolVector)
}
dataFreq <- function(transactionData) {
freq = itemFrequency(transactionData,"absolute")
numItems = ncol(t(freq)) # not sure why ncol, but that's what worked
freqWithAlpaOrdering = cbind(freq,0:(numItems-1))
orderedfreqWithAlpaOrderingreq = freqWithAlpaOrdering[order(freqWithAlpaOrdering[,1],freqWithAlpaOrdering[,2],decreasing=TRUE),]
return(orderedfreqWithAlpaOrderingreq)
}
Rcpp::sourceCpp('FPGrowth.cpp')
Rcpp::sourceCpp('FPGrowth.cpp')
Rcpp::sourceCpp('FPGrowth.cpp')
Rcpp::sourceCpp('FPGrowth.cpp')
Rcpp::sourceCpp('FPGrowth.cpp')
Rcpp::sourceCpp('FPGrowth.cpp')
Rcpp::sourceCpp('FPGrowth.cpp')
names(dataFreq(data))
dataFreq(data)
a = dataFreq(data)
names(a)
a[0]
a[0,1]
a[1,0]
data@itemInfo$labels
a = data@itemInfo$labels
a = data@itemInfo$labels
Rcpp::sourceCpp('FPGrowth.cpp')
Rcpp::sourceCpp('FPGrowth.cpp')
data@itemInfo$labels
Rcpp::sourceCpp('FPGrowth.cpp')
dataFreq(data)
Rcpp::sourceCpp('FPGrowth.cpp')
Rcpp::sourceCpp('FPGrowth.cpp')
dataFreq(data)
19*80000
Rcpp::sourceCpp('FPGrowth.cpp')
Rcpp::sourceCpp('FPGrowth.cpp')
Rcpp::sourceCpp('FPGrowth.cpp')
save.image("~/Dropbox/Parallels/FPGrowth/aug18end.RData")
savehistory("~/Dropbox/Parallels/FPGrowth/rHistory.Rhistory")
